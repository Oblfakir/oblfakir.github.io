{"version":3,"sources":["components/Joystick.jsx","App.js","serviceWorker.js","index.js"],"names":["Joystick","onChange","useState","currentDirection","setCurrentDirection","isDragged","useRef","stickRect","joystickRect","joystickCenter","stickRef","joystickRef","placeStickToCenter","current","style","top","height","left","width","pointerUpHandler","pointerMoveHandler","event","angle","clientX","clientY","X","Y","Math","atan2","calculateAngle","stickWidth","joystickWidth","hypo","sqrt","maxDistance","distance","shouldFireEvent","calculateDistance","sin","cos","angleRad","PI","direction","fireEvent","useEffect","getBoundingClientRect","document","removeEventListener","addEventListener","className","ref","onPointerDown","App","console","log","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aea45e59.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport './Joystick.scss';\n\nexport function Joystick({ onChange }) {\n    let [ currentDirection, setCurrentDirection ] = useState('none');\n    const isDragged = useRef(false);\n    const stickRect = useRef(null);\n    const joystickRect = useRef(null);\n    const joystickCenter = useRef({});\n    const stickRef = useRef(null);\n    const joystickRef = useRef(null);\n\n    const placeStickToCenter = () => {\n        stickRef.current.style.top = `${(joystickRect.current.height / 2) - (stickRect.current.height / 2)}px`;\n        stickRef.current.style.left = `${(joystickRect.current.width / 2) - (stickRect.current.width / 2)}px`;\n    }\n\n    const pointerDownHandler = () => {\n        isDragged.current = true;\n    }\n\n    const pointerUpHandler = () => {\n        isDragged.current = false;\n        placeStickToCenter();\n        setCurrentDirection('none');\n    }\n\n    const calculateAngle = (event) => {\n        const { clientX, clientY } = event;\n        const { X, Y } = joystickCenter.current;\n        \n        return Math.atan2(clientY - Y, clientX - X);\n    }\n\n    const calculateDistance = (event) => {\n        const { clientX, clientY } = event;\n        const { X, Y } = joystickCenter.current;\n        const { width: stickWidth } = stickRect.current;\n        const { width: joystickWidth } = joystickRect.current;\n        const hypo = Math.sqrt((Y - clientY) * (Y - clientY) + (X - clientX) * (X - clientX));\n        const maxDistance = (joystickWidth - stickWidth) / 2;\n        const distance = hypo > maxDistance ? maxDistance : hypo\n\n        return {\n            distance,\n            shouldFireEvent: maxDistance / 2 < distance \n        };\n    }\n\n    const fireEvent = (angleRad) => {\n        const angle = angleRad * 180 / Math.PI;\n        let direction = 'none';\n\n        switch (true) {\n            case (angle >= 45) && (angle <= 135): {\n                direction = 'down';\n                break;\n            }\n            case ((angle >= 135) && (angle <= 180)) || ((angle >= -180) && (angle <= -135)): {\n                direction = 'left';\n                break;\n            }\n            case (angle >= -135) && (angle <= -45): {\n                direction = 'up';\n                break;\n            }\n            case ((angle >= -45) && (angle <= 0)) || ((angle >= 0) && (angle <= 45)): {\n                direction = 'right';\n                break;\n            }\n            default:\n                break;\n        }\n\n        if (currentDirection !== direction) {\n            setCurrentDirection(direction);\n        }\n    }\n\n    const pointerMoveHandler = (event) => {\n        if (isDragged.current) {\n            const angle = calculateAngle(event);\n            const { distance, shouldFireEvent } = calculateDistance(event);\n\n            stickRef.current.style.top = `${(joystickRect.current.height / 2) - (stickRect.current.height / 2) + distance * Math.sin(angle)}px`;\n            stickRef.current.style.left = `${(joystickRect.current.width / 2) - (stickRect.current.width / 2) + distance * Math.cos(angle)}px`;\n\n            if (shouldFireEvent) {\n                fireEvent(angle);\n            }\n        }\n    }\n\n    useEffect(() => {\n        stickRect.current = stickRef.current.getBoundingClientRect();\n        joystickRect.current = joystickRef.current.getBoundingClientRect();\n\n        joystickCenter.current.X = joystickRect.current.left + joystickRect.current.width / 2;\n        joystickCenter.current.Y = joystickRect.current.top + joystickRect.current.height / 2;\n        placeStickToCenter();\n\n        document.removeEventListener('pointermove', pointerMoveHandler);\n        document.removeEventListener('pointerup', pointerUpHandler);\n        document.addEventListener('pointermove', pointerMoveHandler);\n        document.addEventListener('pointerup', pointerUpHandler);\n    });\n\n    useEffect(() => {\n        onChange(currentDirection);\n    }, [ currentDirection, onChange ]);\n\n    return (\n        <div className=\"joystick\" ref={joystickRef}>\n            <div className=\"joystick__stick\" ref={stickRef} onPointerDown={pointerDownHandler}>\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport './App.scss';\nimport { Joystick } from './components/Joystick'\n\nfunction App() {\n  return (\n    <div className=\"layout\">\n      <Joystick onChange={console.log}/>\n    </div>\n  );\n}\n\nexport default App;\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}