{"version":3,"sources":["components/Joystick.jsx","App.js","serviceWorker.js","index.js"],"names":["Joystick","props","state","currentDirection","containerRect","stickRect","containerCenter","stickRef","React","createRef","containerRef","draggedRef","pointerDownHandler","bind","pointerUpHandler","placeStickToCenter","calculateAngle","calculateDistance","pointerMoveHandler","this","current","getBoundingClientRect","X","left","width","Y","top","height","document","addEventListener","hammerManager","Hammer","Press","time","add","on","event","console","log","removeEventListener","style","setState","onChange","clientX","clientY","Math","atan2","hammerEvent","srcEvent","stickWidth","containerWidth","hypo","sqrt","maxDistance","distance","shouldFireEvent","angle","PI","sin","cos","direction","getDirection","className","ref","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1c736150.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Hammer from 'hammerjs';\nimport './Joystick.scss';\n\nconst getDirection = (angle) => {\n    switch (true) {\n        case (angle >= 45) && (angle <= 135): {\n            return 'down';\n        }\n        case ((angle >= 135) && (angle <= 180)) || ((angle >= -180) && (angle <= -135)): {\n            return 'left';\n        }\n        case (angle >= -135) && (angle <= -45): {\n            return 'up';\n        }\n        case ((angle >= -45) && (angle <= 0)) || ((angle >= 0) && (angle <= 45)): {\n            return 'right';\n        }\n        default:\n            return 'none';\n    }\n}\n\nexport class Joystick extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            currentDirection: 'none',\n        };\n\n        this.containerRect = {};\n        this.stickRect = {};\n        this.containerCenter = {};\n\n        this.stickRef = React.createRef();\n        this.containerRef = React.createRef();\n        this.draggedRef = React.createRef();\n\n        this.pointerDownHandler = this.pointerDownHandler.bind(this);\n        this.pointerUpHandler = this.pointerUpHandler.bind(this);\n        this.placeStickToCenter = this.placeStickToCenter.bind(this);\n        this.calculateAngle = this.calculateAngle.bind(this);\n        this.calculateDistance = this.calculateDistance.bind(this);\n        this.pointerMoveHandler = this.pointerMoveHandler.bind(this);\n    }\n\n    componentDidMount() {\n        this.stickRect = this.stickRef.current.getBoundingClientRect();\n        this.containerRect = this.containerRef.current.getBoundingClientRect();\n        this.containerCenter.X = this.containerRect.left + this.containerRect.width / 2;\n        this.containerCenter.Y = this.containerRect.top + this.containerRect.height / 2;\n\n        document.addEventListener('pointerup', this.pointerUpHandler);\n\n        const hammerManager = new Hammer(this.stickRef.current);\n        const Press = new Hammer.Press({\n            time: 0\n        });\n\n        hammerManager.add(Press);\n\n        hammerManager.on('pan', this.pointerMoveHandler);\n        hammerManager.on('press', (event) => {\n            console.log(event);\n            this.pointerDownHandler();\n        });\n\n        this.placeStickToCenter();\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('pointerup', this.pointerUpHandler);\n    }\n\n    pointerDownHandler() {\n        this.draggedRef.current = true;\n    }\n\n    placeStickToCenter() {\n        this.stickRef.current.style.top = `${(this.containerRect.height / 2) - (this.stickRect.height / 2)}px`;\n        this.stickRef.current.style.left = `${(this.containerRect.width / 2) - (this.stickRect.width / 2)}px`;\n    }\n\n    pointerUpHandler() {\n        this.draggedRef.current = false;\n        this.setState({\n            currentDirection: 'none',\n        }, () => {\n            this.props.onChange(this.state.currentDirection);\n        });\n        this.placeStickToCenter();\n    }\n\n    calculateAngle(event) {\n        const { clientX, clientY } = event;\n        const { X, Y } = this.containerCenter;\n        \n        return Math.atan2(clientY - Y, clientX - X);\n    }\n\n    calculateDistance(hammerEvent) {\n        const event = hammerEvent.srcEvent;\n        const { clientX, clientY } = event;\n        const { X, Y } = this.containerCenter;\n        const { width: stickWidth } = this.stickRect;\n        const { width: containerWidth } = this.containerRect;\n        const hypo = Math.sqrt((Y - clientY) * (Y - clientY) + (X - clientX) * (X - clientX));\n        const maxDistance = (containerWidth - stickWidth) / 2;\n        const distance = hypo > maxDistance ? maxDistance : hypo\n\n        return {\n            distance,\n            shouldFireEvent: maxDistance / 2 < distance \n        };\n    }\n\n    pointerMoveHandler(event) {\n        if (this.draggedRef.current) {\n            const { distance, shouldFireEvent } = this.calculateDistance(event);\n\n            const angle = (event.angle * Math.PI) / 180;\n            this.stickRef.current.style.top = `${(this.containerRect.height / 2) - (this.stickRect.height / 2) + distance * Math.sin(angle)}px`;\n            this.stickRef.current.style.left = `${(this.containerRect.width / 2) - (this.stickRect.width / 2) + distance * Math.cos(angle)}px`;\n\n            if (shouldFireEvent) {\n                const direction = getDirection(event.angle);\n                const { currentDirection } = this.state;\n\n                if (currentDirection !== direction) {\n                    this.setState({ currentDirection: direction }, () => {\n                        this.props.onChange(this.state.currentDirection);\n                    });\n                }\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"joystick\" ref={this.containerRef}>\n                <div className=\"joystick__stick\" ref={this.stickRef}>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport './App.scss';\nimport { Joystick } from './components/Joystick'\n\nfunction App() {\n  return (\n    <div className=\"wrapper\">\n      <Joystick onChange={console.log}/>\n    </div>\n  );\n}\n\nexport default App;\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}